***ARROW FUNCTIONS***:--

*Es6 version.
*we dont write function keyword in arrow function.
*more readable and more structure.
*anonymous functions(lambda functions)
*without function name but they are assigned to a variable
**Example:--
*Arrow functions without parameter
 INPUT:-
  let c=()=>{
  document.write("hi varra")
  }
  c();
 OUTPUT:- hi varra
  
*Arrow functions with parameter
 INPUT:-
  let x=(x,y)=>{
  document.write(x+y)
  }
  x(20,30)
  x(40,50)
 OUTPUT:-5090

*Arrow function with one argument
#without using paranthesis
INPUT:-
 let greet=x=>console.log(x);
 greet("hello")
OUTPUT:-
 hello

*Arrow function without argument
INPUT:-
 let greet=()=>console.log("hello")
greet()
OUTPUT:-
 hello
 
*Arrow functions as an expression
INPUT:-
 let age=18;
 let welcome=(age<18)?
 ()=>document.write("hi cherry");
 ()=>document.write("hi pandu");
 welcome()
OUTPUT:-
 hi pandu

***SYNCHRONOUS***
**EXAMPLE**:-
function task1(){
document.write("Task1 : start","<br>")
}
function task2(){
document.write("Task2 : start","<br>")
}
function task3(){
document.write("Task3 : start")
}
task1()
task2()
task3()

OUTPUT:-
Task1 : start
Task2 : start
Task3 : start
 
***ASYNCHRONOUS***
*Multiple tasks at a time
Ex:- 
INPUT:-
document.write("hi harshitha");
setTimeout(()=>{
document.write("hi I am waiting")
},5000);
document.write("I am in Lab")
OUTPUT:-
hi harshitha I am in Lab

Ex:- 
INPUT:-
    function greet(name, callback){
    document.write(`Hi, ${name}!`)
    callback();
    }
    function sayGoodbye(){
    document.write("Goodbye")
    }
    greet("sam",sayGoodbye)
OUTPUT:-
    Hi, sam!Goodbye
